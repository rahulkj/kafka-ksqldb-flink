/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.demo.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -534901127715513290L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"io.demo.model\",\"fields\":[{\"name\":\"orderNumber\",\"type\":\"string\",\"doc\":\"Order Number\"},{\"name\":\"productName\",\"type\":\"string\",\"doc\":\"Product name\"},{\"name\":\"orderSize\",\"type\":\"int\",\"doc\":\"Order Size\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Order Number */
  private java.lang.CharSequence orderNumber;
  /** Product name */
  private java.lang.CharSequence productName;
  /** Order Size */
  private int orderSize;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param orderNumber Order Number
   * @param productName Product name
   * @param orderSize Order Size
   */
  public Order(java.lang.CharSequence orderNumber, java.lang.CharSequence productName, java.lang.Integer orderSize) {
    this.orderNumber = orderNumber;
    this.productName = productName;
    this.orderSize = orderSize;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderNumber;
    case 1: return productName;
    case 2: return orderSize;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderNumber = (java.lang.CharSequence)value$; break;
    case 1: productName = (java.lang.CharSequence)value$; break;
    case 2: orderSize = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'orderNumber' field.
   * @return Order Number
   */
  public java.lang.CharSequence getOrderNumber() {
    return orderNumber;
  }


  /**
   * Sets the value of the 'orderNumber' field.
   * Order Number
   * @param value the value to set.
   */
  public void setOrderNumber(java.lang.CharSequence value) {
    this.orderNumber = value;
  }

  /**
   * Gets the value of the 'productName' field.
   * @return Product name
   */
  public java.lang.CharSequence getProductName() {
    return productName;
  }


  /**
   * Sets the value of the 'productName' field.
   * Product name
   * @param value the value to set.
   */
  public void setProductName(java.lang.CharSequence value) {
    this.productName = value;
  }

  /**
   * Gets the value of the 'orderSize' field.
   * @return Order Size
   */
  public int getOrderSize() {
    return orderSize;
  }


  /**
   * Sets the value of the 'orderSize' field.
   * Order Size
   * @param value the value to set.
   */
  public void setOrderSize(int value) {
    this.orderSize = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static io.demo.model.Order.Builder newBuilder() {
    return new io.demo.model.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static io.demo.model.Order.Builder newBuilder(io.demo.model.Order.Builder other) {
    if (other == null) {
      return new io.demo.model.Order.Builder();
    } else {
      return new io.demo.model.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static io.demo.model.Order.Builder newBuilder(io.demo.model.Order other) {
    if (other == null) {
      return new io.demo.model.Order.Builder();
    } else {
      return new io.demo.model.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    /** Order Number */
    private java.lang.CharSequence orderNumber;
    /** Product name */
    private java.lang.CharSequence productName;
    /** Order Size */
    private int orderSize;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.demo.model.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderNumber)) {
        this.orderNumber = data().deepCopy(fields()[0].schema(), other.orderNumber);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.productName)) {
        this.productName = data().deepCopy(fields()[1].schema(), other.productName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.orderSize)) {
        this.orderSize = data().deepCopy(fields()[2].schema(), other.orderSize);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(io.demo.model.Order other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.orderNumber)) {
        this.orderNumber = data().deepCopy(fields()[0].schema(), other.orderNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productName)) {
        this.productName = data().deepCopy(fields()[1].schema(), other.productName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderSize)) {
        this.orderSize = data().deepCopy(fields()[2].schema(), other.orderSize);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'orderNumber' field.
      * Order Number
      * @return The value.
      */
    public java.lang.CharSequence getOrderNumber() {
      return orderNumber;
    }


    /**
      * Sets the value of the 'orderNumber' field.
      * Order Number
      * @param value The value of 'orderNumber'.
      * @return This builder.
      */
    public io.demo.model.Order.Builder setOrderNumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderNumber' field has been set.
      * Order Number
      * @return True if the 'orderNumber' field has been set, false otherwise.
      */
    public boolean hasOrderNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderNumber' field.
      * Order Number
      * @return This builder.
      */
    public io.demo.model.Order.Builder clearOrderNumber() {
      orderNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productName' field.
      * Product name
      * @return The value.
      */
    public java.lang.CharSequence getProductName() {
      return productName;
    }


    /**
      * Sets the value of the 'productName' field.
      * Product name
      * @param value The value of 'productName'.
      * @return This builder.
      */
    public io.demo.model.Order.Builder setProductName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.productName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productName' field has been set.
      * Product name
      * @return True if the 'productName' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productName' field.
      * Product name
      * @return This builder.
      */
    public io.demo.model.Order.Builder clearProductName() {
      productName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderSize' field.
      * Order Size
      * @return The value.
      */
    public int getOrderSize() {
      return orderSize;
    }


    /**
      * Sets the value of the 'orderSize' field.
      * Order Size
      * @param value The value of 'orderSize'.
      * @return This builder.
      */
    public io.demo.model.Order.Builder setOrderSize(int value) {
      validate(fields()[2], value);
      this.orderSize = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderSize' field has been set.
      * Order Size
      * @return True if the 'orderSize' field has been set, false otherwise.
      */
    public boolean hasOrderSize() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderSize' field.
      * Order Size
      * @return This builder.
      */
    public io.demo.model.Order.Builder clearOrderSize() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.orderNumber = fieldSetFlags()[0] ? this.orderNumber : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.productName = fieldSetFlags()[1] ? this.productName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.orderSize = fieldSetFlags()[2] ? this.orderSize : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.orderNumber);

    out.writeString(this.productName);

    out.writeInt(this.orderSize);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.orderNumber = in.readString(this.orderNumber instanceof Utf8 ? (Utf8)this.orderNumber : null);

      this.productName = in.readString(this.productName instanceof Utf8 ? (Utf8)this.productName : null);

      this.orderSize = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.orderNumber = in.readString(this.orderNumber instanceof Utf8 ? (Utf8)this.orderNumber : null);
          break;

        case 1:
          this.productName = in.readString(this.productName instanceof Utf8 ? (Utf8)this.productName : null);
          break;

        case 2:
          this.orderSize = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










