/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.demo.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7706420223163088462L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserOrder\",\"namespace\":\"io.demo.model\",\"fields\":[{\"name\":\"userName\",\"type\":[\"null\",\"string\"],\"doc\":\"User Name\",\"default\":null},{\"name\":\"orderSize\",\"type\":[\"null\",\"int\"],\"doc\":\"Order Size\",\"default\":null},{\"name\":\"orderNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"Order Number\",\"default\":null},{\"name\":\"productName\",\"type\":[\"null\",\"string\"],\"doc\":\"Product Name\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserOrder> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserOrder> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserOrder> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserOrder> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserOrder> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserOrder to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserOrder from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserOrder instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserOrder fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** User Name */
  private java.lang.CharSequence userName;
  /** Order Size */
  private java.lang.Integer orderSize;
  /** Order Number */
  private java.lang.CharSequence orderNumber;
  /** Product Name */
  private java.lang.CharSequence productName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserOrder() {}

  /**
   * All-args constructor.
   * @param userName User Name
   * @param orderSize Order Size
   * @param orderNumber Order Number
   * @param productName Product Name
   */
  public UserOrder(java.lang.CharSequence userName, java.lang.Integer orderSize, java.lang.CharSequence orderNumber, java.lang.CharSequence productName) {
    this.userName = userName;
    this.orderSize = orderSize;
    this.orderNumber = orderNumber;
    this.productName = productName;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userName;
    case 1: return orderSize;
    case 2: return orderNumber;
    case 3: return productName;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userName = (java.lang.CharSequence)value$; break;
    case 1: orderSize = (java.lang.Integer)value$; break;
    case 2: orderNumber = (java.lang.CharSequence)value$; break;
    case 3: productName = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userName' field.
   * @return User Name
   */
  public java.lang.CharSequence getUserName() {
    return userName;
  }


  /**
   * Sets the value of the 'userName' field.
   * User Name
   * @param value the value to set.
   */
  public void setUserName(java.lang.CharSequence value) {
    this.userName = value;
  }

  /**
   * Gets the value of the 'orderSize' field.
   * @return Order Size
   */
  public java.lang.Integer getOrderSize() {
    return orderSize;
  }


  /**
   * Sets the value of the 'orderSize' field.
   * Order Size
   * @param value the value to set.
   */
  public void setOrderSize(java.lang.Integer value) {
    this.orderSize = value;
  }

  /**
   * Gets the value of the 'orderNumber' field.
   * @return Order Number
   */
  public java.lang.CharSequence getOrderNumber() {
    return orderNumber;
  }


  /**
   * Sets the value of the 'orderNumber' field.
   * Order Number
   * @param value the value to set.
   */
  public void setOrderNumber(java.lang.CharSequence value) {
    this.orderNumber = value;
  }

  /**
   * Gets the value of the 'productName' field.
   * @return Product Name
   */
  public java.lang.CharSequence getProductName() {
    return productName;
  }


  /**
   * Sets the value of the 'productName' field.
   * Product Name
   * @param value the value to set.
   */
  public void setProductName(java.lang.CharSequence value) {
    this.productName = value;
  }

  /**
   * Creates a new UserOrder RecordBuilder.
   * @return A new UserOrder RecordBuilder
   */
  public static io.demo.model.UserOrder.Builder newBuilder() {
    return new io.demo.model.UserOrder.Builder();
  }

  /**
   * Creates a new UserOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserOrder RecordBuilder
   */
  public static io.demo.model.UserOrder.Builder newBuilder(io.demo.model.UserOrder.Builder other) {
    if (other == null) {
      return new io.demo.model.UserOrder.Builder();
    } else {
      return new io.demo.model.UserOrder.Builder(other);
    }
  }

  /**
   * Creates a new UserOrder RecordBuilder by copying an existing UserOrder instance.
   * @param other The existing instance to copy.
   * @return A new UserOrder RecordBuilder
   */
  public static io.demo.model.UserOrder.Builder newBuilder(io.demo.model.UserOrder other) {
    if (other == null) {
      return new io.demo.model.UserOrder.Builder();
    } else {
      return new io.demo.model.UserOrder.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserOrder instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserOrder>
    implements org.apache.avro.data.RecordBuilder<UserOrder> {

    /** User Name */
    private java.lang.CharSequence userName;
    /** Order Size */
    private java.lang.Integer orderSize;
    /** Order Number */
    private java.lang.CharSequence orderNumber;
    /** Product Name */
    private java.lang.CharSequence productName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.demo.model.UserOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userName)) {
        this.userName = data().deepCopy(fields()[0].schema(), other.userName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.orderSize)) {
        this.orderSize = data().deepCopy(fields()[1].schema(), other.orderSize);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.orderNumber)) {
        this.orderNumber = data().deepCopy(fields()[2].schema(), other.orderNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.productName)) {
        this.productName = data().deepCopy(fields()[3].schema(), other.productName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing UserOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(io.demo.model.UserOrder other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.userName)) {
        this.userName = data().deepCopy(fields()[0].schema(), other.userName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderSize)) {
        this.orderSize = data().deepCopy(fields()[1].schema(), other.orderSize);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderNumber)) {
        this.orderNumber = data().deepCopy(fields()[2].schema(), other.orderNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.productName)) {
        this.productName = data().deepCopy(fields()[3].schema(), other.productName);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'userName' field.
      * User Name
      * @return The value.
      */
    public java.lang.CharSequence getUserName() {
      return userName;
    }


    /**
      * Sets the value of the 'userName' field.
      * User Name
      * @param value The value of 'userName'.
      * @return This builder.
      */
    public io.demo.model.UserOrder.Builder setUserName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.userName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userName' field has been set.
      * User Name
      * @return True if the 'userName' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userName' field.
      * User Name
      * @return This builder.
      */
    public io.demo.model.UserOrder.Builder clearUserName() {
      userName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderSize' field.
      * Order Size
      * @return The value.
      */
    public java.lang.Integer getOrderSize() {
      return orderSize;
    }


    /**
      * Sets the value of the 'orderSize' field.
      * Order Size
      * @param value The value of 'orderSize'.
      * @return This builder.
      */
    public io.demo.model.UserOrder.Builder setOrderSize(java.lang.Integer value) {
      validate(fields()[1], value);
      this.orderSize = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderSize' field has been set.
      * Order Size
      * @return True if the 'orderSize' field has been set, false otherwise.
      */
    public boolean hasOrderSize() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orderSize' field.
      * Order Size
      * @return This builder.
      */
    public io.demo.model.UserOrder.Builder clearOrderSize() {
      orderSize = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderNumber' field.
      * Order Number
      * @return The value.
      */
    public java.lang.CharSequence getOrderNumber() {
      return orderNumber;
    }


    /**
      * Sets the value of the 'orderNumber' field.
      * Order Number
      * @param value The value of 'orderNumber'.
      * @return This builder.
      */
    public io.demo.model.UserOrder.Builder setOrderNumber(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.orderNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderNumber' field has been set.
      * Order Number
      * @return True if the 'orderNumber' field has been set, false otherwise.
      */
    public boolean hasOrderNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderNumber' field.
      * Order Number
      * @return This builder.
      */
    public io.demo.model.UserOrder.Builder clearOrderNumber() {
      orderNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'productName' field.
      * Product Name
      * @return The value.
      */
    public java.lang.CharSequence getProductName() {
      return productName;
    }


    /**
      * Sets the value of the 'productName' field.
      * Product Name
      * @param value The value of 'productName'.
      * @return This builder.
      */
    public io.demo.model.UserOrder.Builder setProductName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.productName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'productName' field has been set.
      * Product Name
      * @return True if the 'productName' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'productName' field.
      * Product Name
      * @return This builder.
      */
    public io.demo.model.UserOrder.Builder clearProductName() {
      productName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserOrder build() {
      try {
        UserOrder record = new UserOrder();
        record.userName = fieldSetFlags()[0] ? this.userName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.orderSize = fieldSetFlags()[1] ? this.orderSize : (java.lang.Integer) defaultValue(fields()[1]);
        record.orderNumber = fieldSetFlags()[2] ? this.orderNumber : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.productName = fieldSetFlags()[3] ? this.productName : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserOrder>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserOrder>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserOrder>
    READER$ = (org.apache.avro.io.DatumReader<UserOrder>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.userName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userName);
    }

    if (this.orderSize == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.orderSize);
    }

    if (this.orderNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.orderNumber);
    }

    if (this.productName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.productName);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.userName = null;
      } else {
        this.userName = in.readString(this.userName instanceof Utf8 ? (Utf8)this.userName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.orderSize = null;
      } else {
        this.orderSize = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.orderNumber = null;
      } else {
        this.orderNumber = in.readString(this.orderNumber instanceof Utf8 ? (Utf8)this.orderNumber : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.productName = null;
      } else {
        this.productName = in.readString(this.productName instanceof Utf8 ? (Utf8)this.productName : null);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userName = null;
          } else {
            this.userName = in.readString(this.userName instanceof Utf8 ? (Utf8)this.userName : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.orderSize = null;
          } else {
            this.orderSize = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.orderNumber = null;
          } else {
            this.orderNumber = in.readString(this.orderNumber instanceof Utf8 ? (Utf8)this.orderNumber : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.productName = null;
          } else {
            this.productName = in.readString(this.productName instanceof Utf8 ? (Utf8)this.productName : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










